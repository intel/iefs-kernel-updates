%{!?kver: %global kver %(uname -r)}
%define kdir /lib/modules/%{kver}/source

Name:           RPMNAME
Group:		System Environment/Kernel
Summary:        Extra kernel modules for IEFS
Version:        %(echo %{kver}|sed -e 's/-/_/g')
Release:        RPMRELEASE
License:        GPLv2 or BSD
Source0:        %{name}-RPMVERSION.tgz
Source1:        %{name}.files
Source2:        %{name}.conf
Source3:        modules-load.conf
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRequires:  %kernel_module_package_buildreqs

Requires:       kernel = %(echo %{kver} | sed -e 's/\(.*\).default/\1/g')

%kernel_module_package -f %{SOURCE1} default

%global kernel_source %(
        echo "/lib/modules/%{kver}/build"
)

%global kernelrpm_ver %(
	echo "%(rpm -q --qf %{VERSION} %(rpm -qf /lib/modules/%{kver}/kernel/))"
)

# find our target version
%global kbuild %(
if [ -z "$kbuild" ]; then 
	echo "/lib/modules/%{kver}/build"
else 
	echo "$kbuild"
fi
)

%global kver %(
if [ -f "%{kbuild}/include/config/kernel.release" ]; then
	cat %{kbuild}/include/config/kernel.release
else
	echo "fail"
fi
)

%define modlist MODLIST
%define mversion MVERSION
%define kmod_moddir %kernel_module_package_moddir

%description
Updated kernel modules for Intel Ethernet Farbric Suite

%package dkms
Summary:        Extra kernel modules for IEFS
Requires:       dkms

%description dkms
Updated kernel modules for Intel Ethernet Fabric Suite

%package devel
Summary: Development headers for Intel Ethernet Fabric Suite
Group: System Environment/Development

%description devel
Development header files for Intel Ethernet Fabric Suite

%prep
%setup -qn %{name}-RPMVERSION
rm -rf %{SOURCE2}
for flavor in %flavors_to_build; do
        for mod in %modlist; do
                rm -rf "$mod"_$flavor
                cp -r $mod  "$mod"_$flavor
		echo "override $mod %{kernelrpm_ver}-* weak-updates/$mod" >> %{SOURCE2}
        done
done

%build
if [ "%kver" = "fail" ]; then
        if [ -z "%kbuild" ]; then
                echo "The default target kernel, %kver, is not installed" >&2
                echo "To build, set \$kbuild to your target kernel build directory" >&2
        else
                echo "Cannot find kernel version in %kbuild" >&2
        fi
        exit 1
fi
echo "Kernel version is %kver"
echo "Kernel source directory is \"%kbuild\""

# Build 
#make CONFIG_INFINIBAND_RDMAVT=m
for flavor in %flavors_to_build; do
        for mod in %modlist; do
                rm -rf $mod
                cp -r "$mod"_$flavor $mod
                done
        echo rpm kernel_source %{kernel_source $flavor}
        if [ -z "%mversion" ]; then
                make -j 8 CONFIG_INFINIBAND_RV=m KDIR=%{kernel_source $flavor} M=$PWD
        else
                make -j 8 MVERSION=\"%mversion\" CONFIG_INFINIBAND_RV=m KDIR=%{kernel_source $flavor} M=$PWD
        fi
        for mod in %modlist; do
                rm -rf "$mod"_$flavor
                mv -f $mod "$mod"_$flavor
		ln -s "$mod"_$flavor $mod
        done
done

%install
install -m 644 -D %{SOURCE2} $RPM_BUILD_ROOT/etc/depmod.d/%{name}.conf
for flavor in %flavors_to_build ; do
        mkdir -p $RPM_BUILD_ROOT/lib/modules/%kver/%kmod_moddir/%{name}
        for mod in %modlist; do
#		make -C /usr/src/linux-obj/%_target_cpu/$flavor modules_install M=$PWD/"$mod"_$flavor
		if [[ "$KERNEL_MOD_SIGNING_ENABLED" == "1" ]]; then
			RPM_KMOD_DIR=$RPM_BUILD_ROOT/../../KMODS
			if [ -d $RPM_KMOD_DIR ]; then
				install -m 644 -t $RPM_BUILD_ROOT/lib/modules/%kver/%kmod_moddir/%{name} $RPM_BUILD_ROOT/../../KMODS/"$mod".ko
			else
				echo "WARNING: Installing unsigned kernel module: $mod.ko"
				install -m 644 -t $RPM_BUILD_ROOT/lib/modules/%kver/%kmod_moddir/%{name} "$mod"_$flavor/"$mod".ko
			fi
		else
			install -m 644 -t $RPM_BUILD_ROOT/lib/modules/%kver/%kmod_moddir/%{name} "$mod"_$flavor/"$mod".ko
		fi
        done
done
install -m 644 -D %{SOURCE3} $RPM_BUILD_ROOT%{_sysconfdir}/modules-load.d/%{name}.conf
(srcdir=$(pwd)
cd %kdir
# build 'unifdef' if binary does not exist
if [[ ! -f %kdir/scripts/unifdef ]]; then
	if [[ $(id -u) = 0 ]]; then
		cd scripts
		/usr/bin/gcc unifdef.c -o unifdef
		cd ../
	fi
fi
rvtargetdir=$RPM_BUILD_ROOT%{_includedir}/uapi/rv/
mkdir -p $rvtargetdir

# handle a different headers_install
if sh ./scripts/headers_install.sh | grep -q OUTDIR; then
        sh ./scripts/headers_install.sh $rvtargetdir $srcdir include/uapi/rv/rv_user_ioctls.h
else
        sh ./scripts/headers_install.sh $srcdir/include/uapi/rv/rv_user_ioctls.h $rvtargetdir/rv_user_ioctls.h
fi
)
(mkdir -p $RPM_BUILD_ROOT%{_usrsrc}/%{name}-%{release}/
cp -r * $RPM_BUILD_ROOT%{_usrsrc}/%{name}-%{release})

%post dkms
dkms add -m %{name} -v %{release} || :
dkms build -m %{name} -v %{release} || :
dkms install -m %{name} -v %{release} --force || :

%preun dkms
dkms remove -m %{name} -v %{release} --all || :

%files -n %{name}-kmp-default
%defattr(644,root,root,755)
%{_sysconfdir}/depmod.d/%{name}.conf
%{_sysconfdir}/modules-load.d/%{name}.conf
/lib/modules

%files dkms
%defattr(644,root,root,755)
%{_sysconfdir}/depmod.d/%{name}.conf
%{_sysconfdir}/modules-load.d/%{name}.conf
%{_usrsrc}/%{name}-%{release}/

%files devel
%defattr(-,root,root,-)
%{_includedir}/uapi/rv/rv_user_ioctls.h

%changelog
* Mon Oct 19 2020 Kaike Wan <kaike.wan@intel.com>
- Initial release.

